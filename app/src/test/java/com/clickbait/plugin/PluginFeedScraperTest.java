/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.clickbait.plugin;

import org.apache.commons.io.FileUtils;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.io.TempDir;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.integration.config.EnableIntegration;
import org.springframework.integration.dsl.IntegrationFlow;
import org.springframework.integration.dsl.IntegrationFlows;
import org.springframework.integration.feed.dsl.Feed;
import org.springframework.integration.metadata.MetadataStore;
import org.springframework.integration.metadata.PropertiesPersistingMetadataStore;
import org.springframework.messaging.Message;
import org.springframework.messaging.PollableChannel;
import org.springframework.test.context.ActiveProfiles;

import static org.junit.jupiter.api.Assertions.*;

import java.io.File;
import java.io.FileReader;
import java.net.URL;
import java.nio.file.Path;
import java.util.Properties;

import com.rometools.rome.feed.synd.SyndEntry;

@SpringBootTest
@ActiveProfiles("test")
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class PluginFeedScraperTest {

    @TempDir
    static Path tempFolder;

    @Autowired
    private PollableChannel entries;

    @Value("seed.rss")
    private URL feedUrl;

    @Value("${metadataFolder}")
    private String metadataFolder;

    @Autowired
    private PropertiesPersistingMetadataStore metadataStore;

    @Test
    @SuppressWarnings("unchecked")
    public void testFeedEntryMessageSourceFlow() throws Exception {
        Message<SyndEntry> message1 = (Message<SyndEntry>) this.entries.receive(10000);
        Message<SyndEntry> message2 = (Message<SyndEntry>) this.entries.receive(10000);
        Message<SyndEntry> message3 = (Message<SyndEntry>) this.entries.receive(10000);
        long time1 = message1.getPayload().getPublishedDate().getTime();
        long time2 = message2.getPayload().getPublishedDate().getTime();
        long time3 = message3.getPayload().getPublishedDate().getTime();
        assertTrue(time1 < time2);
        assertTrue(time2 < time3);
        assertNull(this.entries.receive(10));

        this.metadataStore.flush();

        FileReader metadataStoreFile = new FileReader(metadataFolder + "/metadata-store.properties");
        Properties metadataStoreProperties = new Properties();
        metadataStoreProperties.load(metadataStoreFile);
        assertFalse(metadataStoreProperties.isEmpty());
        assertEquals(1, metadataStoreProperties.size());
        assertTrue(metadataStoreProperties.containsKey("feedTest." + feedUrl));
    }

    @AfterAll
    public void teardown() {
        FileUtils.deleteQuietly(new File(metadataFolder));
    }

    @Configuration
    @EnableIntegration
    public static class ContextConfiguration {

        @Value("seed.rss")
        private URL feedUrl;

        @Value("${metadataFolder}")
        private String metadataFolder;

        @Bean
        public MetadataStore metadataStore() {
            PropertiesPersistingMetadataStore metadataStore = new PropertiesPersistingMetadataStore();
            metadataStore.setBaseDirectory(metadataFolder);
            return metadataStore;
        }

        @Bean
        public IntegrationFlow feedFlow() {
            return IntegrationFlows
                    .from(Feed.inboundAdapter(this.feedUrl, "feedTest")
                            .metadataStore(metadataStore()),
                            e -> e.poller(p -> p.fixedDelay(100)))
                    .channel(c -> c.queue("entries"))
                    .get();
        }
    }
}
